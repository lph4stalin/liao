# 定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。

# Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。


# 位置参数
# 我们先写一个计算x²的函数：
def power(x):
    return x * x


# 对于power(x)函数，参数x就是一个位置参数。
# 当我们调用power函数时，必须传入有且仅有的一个参数x

# 我们想计算xⁿ，可以再加入一个参数n，让函数变为power(x, n)
def power(x, n):
    i = 0
    y = 1
    while i < n:
        y = x * y
        i = i + 1
    return y


# 位置参数定义：修改后的power(x, n)函数有两个参数，x和n，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数x和n。

# 默认参数
# 由于我们经常计算x²，所以可以把第二参数n的默认值设定为2：
def power(x, n=2):
    i = 0
    y = 1
    while i < n:
        y = x * y
        i = i + 1
    return y


# 这样，当我们调用power(5)时，相当于调用power(5, 2)
# 如果想计算其他次方，则需要明确地传入n
# 需要注意，必选参数在前，默认参数在后，否则python解释器会报错。
# 注意，默认参数必须指向不变对象！


# 可变参数
# 在Python函数中，还可以定义可变参数。
# 定义：可变参数是指传入的参数的数量是可以变化的，可以是1个、2个到任意个，还可以是0个。
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n
    return sum


# 定义可变参数需要在参数前加*。在函数内部，numbers接收到的是一个tuple。
# 如过传入的是一个list或者tuple，只需要在前面加*传入即可，例如：
# nums = [1, 2, 3]
# clac(*nums)


# 关键字参数
# 定义：关键字参数允许你传入0个或者任意个含参数名的参数，这些关键字参数在函数内部自动组装成一个dict。
def person(name, age, **kw):
    print('name', name, 'age', age, 'other', kw)


person('Michael', 30, city='Beijing')


# 关键字参数可以拓展函数功能。
# 和可变参数类似，如果已经存在一个dict，可以使用'**'+dict来将dict作为关键字参数传入
# 如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接受city和job作为关键字参数。这种方式定义的函数如下：
def person(name, age, *, city, job):
    print(name, age, city, job)
# 这里的city、job是以一个字典的方式传入的。


person('Jack', 24, city='Beijing', job='Engineer')
# 如果传入的关键字参数和定义不符合，那么就会报错。一个例子是print，print接受关键字参数，但是不接受任意关键字参数。
# 关键字参数还可以有缺省值，和默认参数一样，但是调用时必须写出参数名。


# 想法：可变参数和关键字参数只是函数接受tuple和dict作为参数传入，但是如何处理tuple和dict还是需要在函数中进行。
# 问题：如果一个函数既有位置参数，也有默认参数，还有可变参数和关键字参数，Python如何识别他们？

# 参数组合
# 在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数组合使用。但是定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。

# 想法：那么Python识别的顺序可能是：1，先识别必选参数；2，判断是否要修改默认参数的值；3，接下来a、b、c形式的将其打包成一个tuple；4，*号后a, b或a = 'A'形式的（不存在可变参数的情况下，否则不需要*号），作为命名关键字参数传入，检查传入的dict的key；5，最后是检查dict的其他key作为关键字参数传入。
# 默认参数和命名关键字参数的区别：命名关键字参数必须带上参数名称，写成键值对形式，省略会报错。这里与必选参数都是必选，但是传入的方式不一样；命名关键字参数也可以带上默认值，这里就等价于默认参数，和默认参数的区别是没有位置，默认参数如果传入的参数中有和它位置对应的，是会覆盖默认值，而关键字参数则不需要考虑位置。

# 例子：
# 这个函数里，a、b是必选参数、c是默认参数、*args是可变参数、d是命名关键字参数、**kw是关键字参数
def f1(a, b, c=0, *args, d, g='gg', **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =',
          args, 'd =', d, 'g =', g, 'kw =', kw)


def main():
    print(power(5, -1))
    print(calc(1, 2, 3, 4))
    f1(1, 2, 3, 4, 'a', 'b', d='baba', e='woshi', f='nibaba')


if __name__ == '__main__':
    main()
