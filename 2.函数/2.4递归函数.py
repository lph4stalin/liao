# 递归函数
# 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数


# 例如，计算阶乘n! = 1 × 2 × 3 × ... × n，用函数fact(n)表示，可以看出：
# fact(n) = fact(n-1) × n
# 用递归写出来就是：
def fact(n):
    if n == 1:
        return 1
    return n * fact(n - 1)


# 递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。

# 使用递归函数需要注意防止栈溢出(stack overflow)。在计算机中，函数调用是通过栈(stack)这种数据结构实现的，每当进入一个函数调用，栈就好加一层栈桢，每当函数返回，栈就会减一层栈桢。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。

# 练习：汉诺塔
# 思路：abc三跟柱子，n表示盘子数量，将盘子从a全部移动到c;
# 三步：①将a的n-1个盘子移动到b；②将a最大的盘子移动到c；③将b作为出发点，再重复执行①和②
def move(n, from, buffer, to):
    # 如果只有一块盘子，则从a移动到c
    if n == 1:
        print(a, '-->', c)
    # 如果有n块盘子，把n-1块从a移动到b，再把剩余的1块从a移动到c
    else:
        move(n - 1, a, c, b)  # n-1块从a移动到b
        print(a, '-->', c)
        move(n - 1, b, a, c)  # n-1块从b移动到c


move(3, 'a', 'b', 'c')

# ！！不懂汉诺塔
