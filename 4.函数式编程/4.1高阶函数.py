# 高阶函数 High-order function

# 变量可以指向函数
"""
abs(-10)
>>> 10
abs
>>> <built-in function abs>

可见，abs(-10)是函数调用，而abs是函数本身。
要获得函数调用结果，我们可以把结果赋值给变量：
x = abs(-10)
x
>>> 10

但是，如果把函数本身赋值给变量呢？
f = abs
f
>>> <built-in function abs>
结论：函数本身也可以赋值给变量，即：变量可以指向函数。
如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？
f = abs
f(-10)
>>> 10
成功！说明变量f已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。
"""

# 函数名也是变量
"""
函数名就是指向函数的变量！对于abs()这个函数，完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数！
如果把abs指向其他对象，就不能通过abs()调用函数了。

"""


# 传入函数
"""
既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
"""


# 一个最简单的高阶函数：
def add(x, y, f):
    return f(x) + f(y)
# 当我们调用add(-5, 6, abs)时，参数x，y和f分别接收-5,6和abs，根据函数定义，我们可以推导计算过程为：abs(-5) + abs(6) = 5 + 6 = 11


# 一些理解：
# 面向对象：一类有诸多技能的工人，可以让其中一个工人去干一件完整的事情，把解决问题的能力都封装在一类人的神色。
# 面向过程：流水线作业，需要某个工具就取某个工具来用，不关心谁来做，只关心过程
# 函数式编程：调用函数就是取用工具，传入函数的参数可以指明用何种工具
# 高阶函数：函数式编程的具体实现方式。


# map/reduce
# map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
